package servlet;

import model.Category;
import model.ModelPoint;
import model.User;
import service.*;


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@WebServlet("/test_data")
public class TestDataServlet extends HttpServlet {
    UserService userService = UserServiceImpl.getInstance();
    CategoryService categoryService = CategoryServiceImpl.getInstance();
    PointService pointService = PointServiceImpl.getInstance();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setContentType("text/html; charset=UTF-8");
        List<Category> categories = categoryService.getAllCategories();
        if (categories.isEmpty()) {
            categories.add(new Category("Мелкий мусор", "Немного мусора вне урны"));
            categories.add(new Category("Куча мусора", "Большое количествоо скопившегося мусора"));
            categories.add(new Category("Свалка", "Огромная куча бытовых или строительных отходов"));
            for (Category category: categories) {
                categoryService.addCategory(category);
                System.out.println(category.getId());
            }
            List<User> users = new ArrayList<>();
            users.add(new User("User1"));
            users.add(new User("User2"));
            users.add(new User("User3"));
            for (User user: users) {
                userService.addUser(user);
                System.out.println(user.getId());
            }
            String img1 = "";
            String img2 = "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";
            List<ModelPoint> points = new ArrayList<>();
            points.add(new ModelPoint(60.775243, 28.698896, categories.get(0), "12/04/1980 13:01:20", users.get(0),false, img1));
            points.add(new ModelPoint(60.774070, 28.698896, categories.get(0), "12/04/1980 13:01:20", users.get(1),false, img2));
            points.add(new ModelPoint(60.774453, 28.697518, categories.get(1), "12/04/1980 13:01:20", users.get(2), false, ""));
            points.add(new ModelPoint(60.774557, 28.696931, categories.get(1), "12/04/1980 13:01:20", users.get(0),false, ""));
            points.add(new ModelPoint(60.775584, 28.697220, categories.get(0), "12/04/1980 13:01:20", users.get(1),false, ""));
            points.add(new ModelPoint(60.775846, 28.696630, categories.get(1), "12/04/1980 13:01:20", users.get(2), false, ""));

            for (ModelPoint point: points) {
                pointService.addPoint(point);
                System.out.println(point.getId());
            }
            resp.getWriter().println("Тестовые данные внесены в БД");
        } else {
            resp.getWriter().println("Тестовые данные были добавлены ранее");
        }
    }

}
